package com.imcs.grid.taskcontroller.ns;

public enum TaskcontrollerNS {

	TASKCONTROLLERNS("http://grid.imcs.com/taskcontroller"),
	BROKERNS("http://grid.imcs.com/broker"),
	WS_ACTION_PREFIX("urn:"),
	GRIDJOB("gridjob"),
	PERFORMTASK("performTask"),
    GETSTATUS("getStatus"),
    GETLOG("getLog"),
	INIT("initModule"),
	OPERATION("operation"),
	TEXT("text"),
	NAME("name"),
	PID("pid"),
	VALUE("value"),
	SERVICES("services"),
	SERVICE("service"),
	ID("id"),
	DESC("desc"),
	DISCONNECT("disconnect"),
	MAINTENANCE("maintenance"),
	RENAME("rename"),
	CHANGEXML("changeXml"),
	GETXMLDOCUMENT("getXMLDocument"),
	SETXMLDOCUMENT("setXMLDocument"),
	CHANGETOPOLOGYCONFIG("changeTopologyConfig"),
	GETPARTIALLOGS("getPartialLogs"),
	GETPARTIALLOGFILE("getPartialLogFile"),
	STARTPROCESSCONNECTOR( "startProcessConnector"),
	PROPAGATEDB( "propagateDB"),
	SYNCHRONIZEUPDATE ("synchronizeUpdate"),
	PROCESSSTATISTICS("processStatistics"),
	ASYNCRONOUSPROCESS("asyncronousProcess"),
	CHECKPROCESSCONNECTOR( "checkProcessConnector"),
	REQUESTALERTS( "requestAlerts"),
	DELETEALERT( "deleteAlert"),
	REQUESTPROCESSLOGS("requestProcessLogs"),
	REQUESTNODELOGS("requestNodeLogs"),
	REQUESTPCLOGS("requestPcLogs"),
	REQUESTCONTROLPROCLOGS("requestControlProcLogs"),
	LAUNCHPDMMONITOR ("launchPDMMonitor"),
	DELETECACHEFOLDER ("deleteCacheFolder"), 
	CACHE("cache"),
	FOLDER("folder"),
	FOLDERS("folders"),
	REPLICATEZIPFILE("replicateZipFile"),
	REQUESTDELETEDFILTEREDALERTS("requestDeletedFilteredAlerts"),
	GETALLSUBMITTEDMESSAGES("getAllSubmittedMessages"),
	GETSUBMITTEDMESSAGE("getSubmittedMessage"),
	CLOSESESSION("closeSession"),
	STOPNODE("stopNode"),
	GETSERVICES("getServices"),
	GETSERVICESDESCRIPTION("getServicesDescription"),
	GETRESULT("getResult"),
	GETACTIVEPIDS("getActivePids"),
	FINISHEDJOB("finishedJob"),
	CHANGERUNNINGPHASE("changeRunningPhase"),
	PHASESTATUS("phasestatus"),
	DELIVERRESULT("deliverResult"),
	CHANGEXMLGRID("changeXmlGrid"),
	ADDR("addr"),
	STATUSPROCESSCONECTOR("statusProcessConector"),
	LOCATION("location"),
	STATUS("status"),
	GETALLNODES("getAllNodes"),
	DOCUMENT("document"),
	TITLE("title"),
	CONTENT("content"),
	NEWROOTLOCATION("newRootLocation"),
	GRIDNAME("gridName"),
	LOGS("logs"),
	FILES("files"),
	FILE("file"),
	FILECONTENT("fileContent"),
	PORT("port"),
	CMD("cmd"),
	PARAMS("params"),
	TIME("time"),
	EXTENSIONS("extensions"),
	EXTENSION("extension"),
	GRIDJOBS("gridjobs"),
	DIRECTORYNAME("directoryName"),
	EXTENSIONFILES("extensionFiles"),
	EMPTY("empty"),
	ROOTLOCATION("rootLocation"),
	UNIQUESESSIONID("uniqueSessionId"),
	GETROOT("getRoot"),
	CHANGESTATE("changeState"),
	EVENT("event"),
	SUMMARY("summary"),
	NODE("node"),
	DATE("date"),
	CHECKANDSTARTUPDBIFNECESSARY("checkAndStartUpDBIfNecessary"),
	GRIDJOB_RESPONSE("gridjob-response"),
	MVSINFO("mvsinfo"),
	JCL("jcl"),
	FCT("fileCompareType"),
	RCACTUAL("rcActual"),
	RCDESACTUAL("rcDescActual"),
	STEP("step"),
	PGM("pgm"),
	NODE_INFO("node-info"),
	STATE("state"),
	DESCRIPTION("description"),
	AGE("age"),
	RESULT("result"),
	WAIT_FOR_PREALLOC("wait_for_prealloc"),
	SIZE("size"), 
	KILL_PC("killProcessConnector"),
	STOP("stopModule"),
	PROPAGATEPC("propagatePc"),
	PROPAGATEVG("propagateValidaGrid"),
	PROPAGATECS("propagateControlSpace"),
	ADDSTATISTICSALEBRA("addStatisticsAlebra"),
	CPUDOWNLOAD("cpuDownload"),
	ELAPSEDDOWNLOAD("elapsedDownload"),
	CPUUPLOAD("cpuUpload"),
	ELAPSEDUPLOAD("elapsedUpload"),
	NUMFILESIN("numFilesIn"),
	SIZEFILESIN("sizeFilesIn"),
	NUMCACHEFILESIN("numCacheFilesIn"),
	SIZECACHEFILESIN("sizeCacheFilesIn"),
	NUMFILESOUT("numFilesOut"),
	SIZEFILESOUT("sizeFilesOut"),
	REDUNDANCECODE("redundanceCode"),
	ENDEXECUTION("endExecution"),
	ADDRESULTPARALLEL("addResultParallel"),
	ADDSERVICEEXECUTION("addServiceExecution"),
	ADDEXECUTION("addExecution"),
	ADDGRIDAVAILABILITY("addGridAvailability"),
	AVAILABLENODES("availableNodes"),
	INITIME("initTime"),
	EXEC("exec"),
	SESSION("session"),
	ADDSERVICES("addServices"),
	RC("rc"),
	UNSETRUNNING("unSetRunning"),
	TOTALTIME("totalTime"),
	SERVICETIME("serviceTime"), 
	TYPE("type"),
	SHUTDOWN_KILL_NODE("forceShutdownKillNode"),
	USERSERVICES("user-services");
	
	private String value = null;
	
	TaskcontrollerNS(String value) {
		this.value = value;
	}
	
	public String getValue() {
		return value;
	}
	
}
